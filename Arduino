/*
 Automatic water with solenoid valves
*/
 
/*Define Plants
plant0 is an Oregano
plant1 is an Basilikum
plant2 is an Sukkerert
*/
 
//Define warning LED
#define led 13
 
//Define how many measurement one takes average of, and wait time between each sample
#define averageMeasuringsensor 30 // How many samples
#define averageWaittimesensor 100 // Wait time between each sample


//Plants setup
#define numberOfPlants 3 // Enter how many plants you have

int StartwateringPlant[numberOfPlants] = {100, 400, 400}; // Add a new value for each plant, this is when it starts watering
int StopwateringPlant[numberOfPlants] = {450, 450, 450}; // Add a new value for each plant, this is when it stop watering.
int SensorpinPlant[numberOfPlants] = {A0, A1, A2}; // Analoge pin, Add a new value for each plant
int SolenoidoutputPlant[numberOfPlants] = {2, 3, 4}; // Digital pin, Add a new value for each plant.
int WateringtimePlant[numberOfPlants] = {2000, 2000, 2000}; // Divide by 1000 and get seconds. Add a new value for each plant.
int WateringpausetimePlant[numberOfPlants] = {5000, 5000, 5000}; // Divide by 1000 and get seconds. Add a new value for each plant.

//Setup ends here
 
//the value readed from each moisture sensor
int moisturePlant[numberOfPlants] = {0}; //plante 0 til 2
 
//the sum of the 30 times sampling
long int moistureSumPlant[numberOfPlants] = {0}; // We need to sampling the moisture 30 times and get its average value, this variable is used to store the sum of the 30 times sampled value
 
boolean keepWateringPlant[numberOfPlants] = {false};

int howmanyPlants = numberOfPlants - 1;
 
void setup() {
  Serial.begin(9600);
  for(int x = 0; x <= howmanyPlants; x++)
    {
      pinMode(SolenoidoutputPlant[x], OUTPUT);  //setter solenoidportene til utganger
    }
 
  pinMode(led, OUTPUT);
}
 
void loop() {
  for(int PlanteLoop = 0; PlanteLoop <= howmanyPlants; PlanteLoop++)
  {
    moistureSamplingPlant(PlanteLoop);
    if (moisturePlant[PlanteLoop] < StartwateringPlant[PlanteLoop]){
      keepWateringPlant[PlanteLoop] = true; // Turn on watering on plan1
    }
    if (moisturePlant[PlanteLoop] > StopwateringPlant[PlanteLoop]) {
      keepWateringPlant[PlanteLoop] = false; // Turn off watering on plan1
    }
    if (keepWateringPlant[PlanteLoop] == true) {
      if (PlanteLoop == 0) digitalWrite(led, HIGH);  //bare endre LEDen for plante 0
      digitalWrite(SolenoidoutputPlant[PlanteLoop], HIGH); // Open valve
      delay(WateringtimePlant[PlanteLoop]); // How long it will water
      digitalWrite(SolenoidoutputPlant[PlanteLoop], LOW);
      if (PlanteLoop == 0) digitalWrite(led, LOW); //bare endre LEDen for plante 0
      delay(WateringpausetimePlant[PlanteLoop]); // 5 second wait time
    }
  }
}
 
void moistureSamplingPlant(int PlantNr) //Read value of plant moisture
{
  for(int i = 0; i < averageMeasuringsensor; i++)// sampling predefined.
  {
    moistureSumPlant[PlantNr] = moistureSumPlant[PlantNr] + analogRead(SensorpinPlant[PlantNr]);
    delay(averageWaittimesensor);
  }
  moisturePlant[PlantNr] = moistureSumPlant[PlantNr] / averageMeasuringsensor; //Divide to get correct reading
  Serial.print("Plant ");
  Serial.print(PlantNr);
  Serial.print(" of ");
  Serial.print(howmanyPlants);
  Serial.print(" have an moisture of " );
  Serial.print(moisturePlant[PlantNr]);
  Serial.print(". Plant watering status is ");
  Serial.print(keepWateringPlant[PlantNr]);
  Serial.println();
  moistureSumPlant[PlantNr] = 0; // Reset counting variable
}
